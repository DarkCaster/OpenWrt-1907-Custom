language: c

os: linux
dist: bionic

before_install:
  - sudo apt-get install -y pigz

cache:
  directories:
    - /home/travis/.cache/openwrt

git:
  depth: 1

env:
  global:
    - _scripts_repo="https://github.com/DarkCaster/OpenWrt-Helper-Scripts"
    - _configs_repo="https://github.com/DarkCaster/OpenWrt-Buildconfigs.git"
    - _openwrt_version="OpenWrt-1907-custom"
    - OPENWRT_BUILD_CACHE_DIR="/home/travis/.cache/openwrt"

cleanup: &cleanup
  stage: "cleanup"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" cleanup "$TRAVIS_BUILD_ID" "$TRAVIS_EVENT_TYPE"

prepare: &prepare
  stage: "prepare"
  git:
    depth: false
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" prepare "$TRAVIS_BUILD_ID" "$TRAVIS_EVENT_TYPE"

tools: &tools
  stage: "tools"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" tools "$TRAVIS_BUILD_ID" "$TRAVIS_EVENT_TYPE"

toolchain_prep: &toolchain_prep
  stage: "toolchain prepare"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" toolchain_prep "$TRAVIS_BUILD_ID" "$TRAVIS_EVENT_TYPE"

toolchain_final: &toolchain_final
  stage: "toolchain final"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" toolchain_final "$TRAVIS_BUILD_ID" "$TRAVIS_EVENT_TYPE"

packages: &packages
  stage: "packages"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" packages "$TRAVIS_BUILD_ID" "$TRAVIS_EVENT_TYPE"

firmware: &firmware
  stage: "firmware"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" firmware "$TRAVIS_BUILD_ID" "$TRAVIS_EVENT_TYPE"
  before_deploy:
      - git config --local user.name "Travis"
      - git config --local user.email "deploy@travis-ci.com"
      - if [[ $TRAVIS_EVENT_TYPE = "cron" ]]; then export TRAVIS_TAG="auto"; else export TRAVIS_TAG="manual"; fi
      - git tag "$TRAVIS_TAG" || true
  deploy:
    provider: releases
    overwrite: true
    skip_cleanup: true
    api_key:
      secure: K96Dv8FqF0nGOxEl/YqP9T6pmjQtLanCkq8G5iSNvUpC0X5bojnmAn+u5C1VVwQf9mOvU2cHOKxjeqMGq9YufhSSmKWdkqSl4Fi/30MJtFG2LkU2Wfb2CQu/oWIGFmegHK0N+p4gzDUXXuc5cTzdOLNTdyg1MszOwAuPfEl+fr0Ar8PkNX9G7W/5o1UwEFlya6misI+UfMQ1pvYzZjeWIHwJ7f9wAbPxs+7lqYTCrYiYCHaiWAkTioIFNGKdKDOlshefR9tDNUP25xq9HSfthm8RZQuh58/nJkBbBLyYDdacVwuxSJI8iEMGNlqGeFHNM+h6yHU6ouGN3QL8aykF+kWHfXx7+Hito2kqe5Dnadmuxf313sX3TPYDQV3Z3fWuVOa76Gaf3bhFf28G/csG3//vZMZZ7tZg0hCobY4RMkmebU9DYf9MVmi/PFhod1at8XiGlerloLkqkvgr4Jbl4GJ2IXFrpSVWVsHkHwxko2/gw9QCq2vUJheWNt0MXrCfO5sgS41tyX9Xc+u4D0ZsCDppJLeRToyRGs/zqvKMnQNgqDXVAtXFMli7lGKWNYSh+mbqkCedNK7brpSV+O0wU++Zv/xph4zr/PfIL/K4DzZOZfLR4jtZZPwu0Owbh4bfq9v8prwfh3GDQqXcnWwwMakd64WRGiKPN7JsX/GZ+/o=
    file_glob: true
    file: "*.tar.xz"
    on:
      all_branches: true

jobs:
  include:
    - <<: *cleanup
      env: _build_name="tplink-wr842nd-v2"
    - <<: *cleanup
      env: _build_name="tplink-wr842n-v5"
    - <<: *cleanup
      env: _build_name="kvm64"
    - <<: *cleanup
      env: _build_name="netgear-wnr2000+tplink-wr842nd-v1"
    - <<: *cleanup
      env: _build_name="zyxel-keenetic-omni1+2"

    - <<: *prepare
      env: _build_name="tplink-wr842nd-v2"
    - <<: *prepare
      env: _build_name="tplink-wr842n-v5"
    - <<: *prepare
      env: _build_name="kvm64"
    - <<: *prepare
      env: _build_name="netgear-wnr2000+tplink-wr842nd-v1"
    - <<: *prepare
      env: _build_name="zyxel-keenetic-omni1+2"

    - <<: *tools
      env: _build_name="tplink-wr842nd-v2"
    - <<: *tools
      env: _build_name="tplink-wr842n-v5"
    - <<: *tools
      env: _build_name="kvm64"
    - <<: *tools
      env: _build_name="netgear-wnr2000+tplink-wr842nd-v1"
    - <<: *tools
      env: _build_name="zyxel-keenetic-omni1+2"

    - <<: *toolchain_prep
      env: _build_name="tplink-wr842nd-v2"
    - <<: *toolchain_prep
      env: _build_name="tplink-wr842n-v5"
    - <<: *toolchain_prep
      env: _build_name="kvm64"
    - <<: *toolchain_prep
      env: _build_name="netgear-wnr2000+tplink-wr842nd-v1"
    - <<: *toolchain_prep
      env: _build_name="zyxel-keenetic-omni1+2"

    - <<: *toolchain_final
      env: _build_name="tplink-wr842nd-v2"
    - <<: *toolchain_final
      env: _build_name="tplink-wr842n-v5"
    - <<: *toolchain_final
      env: _build_name="kvm64"
    - <<: *toolchain_final
      env: _build_name="netgear-wnr2000+tplink-wr842nd-v1"
    - <<: *toolchain_final
      env: _build_name="zyxel-keenetic-omni1+2"

    - <<: *packages
      env: _build_name="tplink-wr842nd-v2"
    - <<: *packages
      env: _build_name="tplink-wr842n-v5"
    - <<: *packages
      env: _build_name="kvm64"
    - <<: *packages
      env: _build_name="netgear-wnr2000+tplink-wr842nd-v1"
    - <<: *packages
      env: _build_name="zyxel-keenetic-omni1+2"

    - <<: *firmware
      env: _build_name="tplink-wr842nd-v2"
    - <<: *firmware
      env: _build_name="tplink-wr842n-v5"
    - <<: *firmware
      env: _build_name="kvm64"
    - <<: *firmware
      env: _build_name="netgear-wnr2000+tplink-wr842nd-v1"
    - <<: *firmware
      env: _build_name="zyxel-keenetic-omni1+2"
