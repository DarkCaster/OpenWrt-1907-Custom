language: c

os: linux
dist: bionic

before_install:
  - sudo apt-get install -y lrzip

cache:
  directories:
    - /home/travis/.cache/openwrt

git:
  depth: false

env:
  global:
    - _scripts_repo="https://github.com/DarkCaster/OpenWrt-Helper-Scripts"
    - _configs_repo="https://github.com/DarkCaster/OpenWrt-Buildconfigs.git"
    - _openwrt_version="OpenWrt-1907-custom"
    - OPENWRT_BUILD_CACHE_DIR="/home/travis/.cache/openwrt"

cleanup: &cleanup
  stage: "cleanup"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" cleanup

prepare: &prepare
  stage: "prepare"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" prepare

tools: &tools
  stage: "tools"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" tools

toolchain_prep: &toolchain_prep
  stage: "toolchain prepare"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" toolchain_prep

toolchain_final: &toolchain_final
  stage: "toolchain final"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" toolchain_final

packages: &packages
  stage: "packages"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" packages

firmware: &firmware
  stage: "firmware"
  script: ./build.sh "$_scripts_repo" "$_configs_repo" "$_openwrt_version" "$_build_name" firmware
  before_deploy:
      - git config --local user.name "Travis"
      - git config --local user.email "deploy@travis-ci.com"
      - if [[ $TRAVIS_EVENT_TYPE = "cron" ]]; then export TRAVIS_TAG="auto"; else export TRAVIS_TAG="manual"; fi
      - git tag "$TRAVIS_TAG" || true
  deploy:
    provider: releases
    overwrite: true
    skip_cleanup: true
    api_key:
      secure: igoKvivmN0b+k8ZewuGHJSNQpqcgTlHxH5MyrV/SimAbiLkhI8GBZsWTIL0HNafpRYjXGvFXvkoH3Rqz582Wu0fUdxWvsiFpHatfNPwRxO2fLdhQMEAUcP125aRJ/P5eh+O9wSEN9AZtnoYQsycjrq7Yc9MIo9PfYtKVuHg8D/sZaVbolCKnRZy7j7Ou5dnWIH7gGGqzcCNYgz/MZpeQwOoz6uTM5L9T3HW91MqVZdRLY0H6AAugmbYnbBnn3+9H3zOCCLMwcWj38IaLn/+Jc7VIj2J4J/tWSFlHIRtALQnKAbxgHwGnlbMvKzybF87e/8uKj5ai4HtjHxSa31XGcxcuumj69q7EwOGj1F9oQxH3YdDhsCFHTJVKyzX8MMbUQq8s6Mt1K3dsxH63bMmb2j4LprtkVwhgetC7UvL5mJo6IBywhfTe8jG8m0+Cq+4QokTvTpjHoQywj7JtXSEN47XxtJD7GbHyfr9OoxT14+cEDi+F31/9e0gAAIgjmmjmM2tdyEAqkPuVBy735mb+Kr2Ntk8yJuoY4GCtKtHmk/Y9Ebr4ife/80u9f0grUxzaBxg9O1LUuah77yybm71HN2+e3x2IKiZ1AIPPFLEVQgZRT+11tWBXsgim1iGiQKwxGoaX8XEdKG6gqKnETGk7Cgjh224FCXW9VkjRch/qHHI=
    file_glob: true
    file: "*.tar.xz"
    on:
      all_branches: true

jobs:
  include:
    - <<: *cleanup
      env: _build_name="netgear-wnr2000+tplink-wr842nd"
#    - <<: *cleanup
#      env: _build_name="kvm64"

    - <<: *prepare
      env: _build_name="netgear-wnr2000+tplink-wr842nd"
#    - <<: *prepare
#      env: _build_name="kvm64"

    - <<: *tools
      env: _build_name="netgear-wnr2000+tplink-wr842nd"
#    - <<: *tools
#      env: _build_name="kvm64"

    - <<: *toolchain_prep
      env: _build_name="netgear-wnr2000+tplink-wr842nd"
#    - <<: *toolchain_prep
#      env: _build_name="kvm64"

    - <<: *toolchain_final
      env: _build_name="netgear-wnr2000+tplink-wr842nd"
#    - <<: *toolchain_final
#      env: _build_name="kvm64"

    - <<: *packages
      env: _build_name="netgear-wnr2000+tplink-wr842nd"
#    - <<: *packages
#      env: _build_name="kvm64"

    - <<: *firmware
      env: _build_name="netgear-wnr2000+tplink-wr842nd"
#    - <<: *firmware
#      env: _build_name="kvm64"
